# CMake generated Testfile for 
# Source directory: F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit
# Build directory: F:/code/3rdparty/geos-3.8.1/vs2019/tests/unit
# 
# This file includes the relevant testing commands required for 
# testing this directory and lists subdirectories to be tested as well.
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-Angle "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::algorithm::Angle")
  set_tests_properties(unit-algorithm-Angle PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-Angle "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::algorithm::Angle")
  set_tests_properties(unit-algorithm-Angle PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-Angle "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::Angle")
  set_tests_properties(unit-algorithm-Angle PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-Angle "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::Angle")
  set_tests_properties(unit-algorithm-Angle PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-Angle NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-Area "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::algorithm::Area")
  set_tests_properties(unit-algorithm-Area PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-Area "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::algorithm::Area")
  set_tests_properties(unit-algorithm-Area PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-Area "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::Area")
  set_tests_properties(unit-algorithm-Area PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-Area "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::Area")
  set_tests_properties(unit-algorithm-Area PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-Area NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-CGAlgorithms-computeOrientation "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::computeOrientation")
  set_tests_properties(unit-algorithm-CGAlgorithms-computeOrientation PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-CGAlgorithms-computeOrientation "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::computeOrientation")
  set_tests_properties(unit-algorithm-CGAlgorithms-computeOrientation PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-CGAlgorithms-computeOrientation "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::computeOrientation")
  set_tests_properties(unit-algorithm-CGAlgorithms-computeOrientation PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-CGAlgorithms-computeOrientation "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::computeOrientation")
  set_tests_properties(unit-algorithm-CGAlgorithms-computeOrientation PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-CGAlgorithms-computeOrientation NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-CGAlgorithms-isCCW "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::isCCW")
  set_tests_properties(unit-algorithm-CGAlgorithms-isCCW PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-CGAlgorithms-isCCW "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::isCCW")
  set_tests_properties(unit-algorithm-CGAlgorithms-isCCW PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-CGAlgorithms-isCCW "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::isCCW")
  set_tests_properties(unit-algorithm-CGAlgorithms-isCCW PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-CGAlgorithms-isCCW "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::isCCW")
  set_tests_properties(unit-algorithm-CGAlgorithms-isCCW PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-CGAlgorithms-isCCW NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-CGAlgorithms-isPointInRing "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::isPointInRing")
  set_tests_properties(unit-algorithm-CGAlgorithms-isPointInRing PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-CGAlgorithms-isPointInRing "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::isPointInRing")
  set_tests_properties(unit-algorithm-CGAlgorithms-isPointInRing PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-CGAlgorithms-isPointInRing "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::isPointInRing")
  set_tests_properties(unit-algorithm-CGAlgorithms-isPointInRing PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-CGAlgorithms-isPointInRing "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::isPointInRing")
  set_tests_properties(unit-algorithm-CGAlgorithms-isPointInRing PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-CGAlgorithms-isPointInRing NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-CGAlgorithms-signedArea "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::signedArea")
  set_tests_properties(unit-algorithm-CGAlgorithms-signedArea PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-CGAlgorithms-signedArea "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::signedArea")
  set_tests_properties(unit-algorithm-CGAlgorithms-signedArea PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-CGAlgorithms-signedArea "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::signedArea")
  set_tests_properties(unit-algorithm-CGAlgorithms-signedArea PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-CGAlgorithms-signedArea "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::CGAlgorithms::signedArea")
  set_tests_properties(unit-algorithm-CGAlgorithms-signedArea PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-CGAlgorithms-signedArea NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-ConvexHull "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::algorithm::ConvexHull")
  set_tests_properties(unit-algorithm-ConvexHull PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-ConvexHull "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::algorithm::ConvexHull")
  set_tests_properties(unit-algorithm-ConvexHull PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-ConvexHull "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::ConvexHull")
  set_tests_properties(unit-algorithm-ConvexHull PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-ConvexHull "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::ConvexHull")
  set_tests_properties(unit-algorithm-ConvexHull PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-ConvexHull NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-InteriorPointArea "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::algorithm::InteriorPointArea")
  set_tests_properties(unit-algorithm-InteriorPointArea PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-InteriorPointArea "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::algorithm::InteriorPointArea")
  set_tests_properties(unit-algorithm-InteriorPointArea PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-InteriorPointArea "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::InteriorPointArea")
  set_tests_properties(unit-algorithm-InteriorPointArea PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-InteriorPointArea "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::InteriorPointArea")
  set_tests_properties(unit-algorithm-InteriorPointArea PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-InteriorPointArea NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-Intersection "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::algorithm::Intersection")
  set_tests_properties(unit-algorithm-Intersection PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-Intersection "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::algorithm::Intersection")
  set_tests_properties(unit-algorithm-Intersection PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-Intersection "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::Intersection")
  set_tests_properties(unit-algorithm-Intersection PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-Intersection "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::Intersection")
  set_tests_properties(unit-algorithm-Intersection PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-Intersection NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-Length "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::algorithm::Length")
  set_tests_properties(unit-algorithm-Length PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-Length "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::algorithm::Length")
  set_tests_properties(unit-algorithm-Length PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-Length "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::Length")
  set_tests_properties(unit-algorithm-Length PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-Length "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::Length")
  set_tests_properties(unit-algorithm-Length PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-Length NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-LocatePointInRing "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::algorithm::LocatePointInRing")
  set_tests_properties(unit-algorithm-LocatePointInRing PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-LocatePointInRing "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::algorithm::LocatePointInRing")
  set_tests_properties(unit-algorithm-LocatePointInRing PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-LocatePointInRing "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::LocatePointInRing")
  set_tests_properties(unit-algorithm-LocatePointInRing PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-LocatePointInRing "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::LocatePointInRing")
  set_tests_properties(unit-algorithm-LocatePointInRing PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-LocatePointInRing NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-MinimumBoundingCircle "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::algorithm::MinimumBoundingCircle")
  set_tests_properties(unit-algorithm-MinimumBoundingCircle PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-MinimumBoundingCircle "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::algorithm::MinimumBoundingCircle")
  set_tests_properties(unit-algorithm-MinimumBoundingCircle PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-MinimumBoundingCircle "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::MinimumBoundingCircle")
  set_tests_properties(unit-algorithm-MinimumBoundingCircle PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-MinimumBoundingCircle "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::MinimumBoundingCircle")
  set_tests_properties(unit-algorithm-MinimumBoundingCircle PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-MinimumBoundingCircle NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-MinimumDiameter "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::algorithm::MinimumDiameter")
  set_tests_properties(unit-algorithm-MinimumDiameter PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-MinimumDiameter "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::algorithm::MinimumDiameter")
  set_tests_properties(unit-algorithm-MinimumDiameter PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-MinimumDiameter "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::MinimumDiameter")
  set_tests_properties(unit-algorithm-MinimumDiameter PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-MinimumDiameter "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::MinimumDiameter")
  set_tests_properties(unit-algorithm-MinimumDiameter PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-MinimumDiameter NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-OrientationIndexFailure "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::algorithm::OrientationIndexFailure")
  set_tests_properties(unit-algorithm-OrientationIndexFailure PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-OrientationIndexFailure "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::algorithm::OrientationIndexFailure")
  set_tests_properties(unit-algorithm-OrientationIndexFailure PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-OrientationIndexFailure "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::OrientationIndexFailure")
  set_tests_properties(unit-algorithm-OrientationIndexFailure PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-OrientationIndexFailure "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::OrientationIndexFailure")
  set_tests_properties(unit-algorithm-OrientationIndexFailure PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-OrientationIndexFailure NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-PointLocator "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::algorithm::PointLocator")
  set_tests_properties(unit-algorithm-PointLocator PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-PointLocator "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::algorithm::PointLocator")
  set_tests_properties(unit-algorithm-PointLocator PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-PointLocator "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::PointLocator")
  set_tests_properties(unit-algorithm-PointLocator PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-PointLocator "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::PointLocator")
  set_tests_properties(unit-algorithm-PointLocator PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-PointLocator NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-RobustLineIntersection "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::algorithm::RobustLineIntersection")
  set_tests_properties(unit-algorithm-RobustLineIntersection PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-RobustLineIntersection "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::algorithm::RobustLineIntersection")
  set_tests_properties(unit-algorithm-RobustLineIntersection PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-RobustLineIntersection "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::RobustLineIntersection")
  set_tests_properties(unit-algorithm-RobustLineIntersection PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-RobustLineIntersection "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::RobustLineIntersection")
  set_tests_properties(unit-algorithm-RobustLineIntersection PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-RobustLineIntersection NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-RobustLineIntersector "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::algorithm::RobustLineIntersector")
  set_tests_properties(unit-algorithm-RobustLineIntersector PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-RobustLineIntersector "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::algorithm::RobustLineIntersector")
  set_tests_properties(unit-algorithm-RobustLineIntersector PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-RobustLineIntersector "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::RobustLineIntersector")
  set_tests_properties(unit-algorithm-RobustLineIntersector PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-RobustLineIntersector "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::RobustLineIntersector")
  set_tests_properties(unit-algorithm-RobustLineIntersector PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-RobustLineIntersector NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-distance-DiscreteFrechetDistance "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::algorithm::distance::DiscreteFrechetDistance")
  set_tests_properties(unit-algorithm-distance-DiscreteFrechetDistance PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-distance-DiscreteFrechetDistance "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::algorithm::distance::DiscreteFrechetDistance")
  set_tests_properties(unit-algorithm-distance-DiscreteFrechetDistance PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-distance-DiscreteFrechetDistance "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::distance::DiscreteFrechetDistance")
  set_tests_properties(unit-algorithm-distance-DiscreteFrechetDistance PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-distance-DiscreteFrechetDistance "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::distance::DiscreteFrechetDistance")
  set_tests_properties(unit-algorithm-distance-DiscreteFrechetDistance PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-distance-DiscreteFrechetDistance NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-algorithm-distance-DiscreteHausdorffDistance "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::algorithm::distance::DiscreteHausdorffDistance")
  set_tests_properties(unit-algorithm-distance-DiscreteHausdorffDistance PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-algorithm-distance-DiscreteHausdorffDistance "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::algorithm::distance::DiscreteHausdorffDistance")
  set_tests_properties(unit-algorithm-distance-DiscreteHausdorffDistance PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-algorithm-distance-DiscreteHausdorffDistance "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::algorithm::distance::DiscreteHausdorffDistance")
  set_tests_properties(unit-algorithm-distance-DiscreteHausdorffDistance PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-algorithm-distance-DiscreteHausdorffDistance "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::algorithm::distance::DiscreteHausdorffDistance")
  set_tests_properties(unit-algorithm-distance-DiscreteHausdorffDistance PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-algorithm-distance-DiscreteHausdorffDistance NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSBuffer "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSBuffer")
  set_tests_properties(unit-capi-GEOSBuffer PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSBuffer "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSBuffer")
  set_tests_properties(unit-capi-GEOSBuffer PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSBuffer "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSBuffer")
  set_tests_properties(unit-capi-GEOSBuffer PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSBuffer "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSBuffer")
  set_tests_properties(unit-capi-GEOSBuffer PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSBuffer NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSBuildArea "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSBuildArea")
  set_tests_properties(unit-capi-GEOSBuildArea PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSBuildArea "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSBuildArea")
  set_tests_properties(unit-capi-GEOSBuildArea PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSBuildArea "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSBuildArea")
  set_tests_properties(unit-capi-GEOSBuildArea PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSBuildArea "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSBuildArea")
  set_tests_properties(unit-capi-GEOSBuildArea PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSBuildArea NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSCAPIDefines "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSCAPIDefines")
  set_tests_properties(unit-capi-GEOSCAPIDefines PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSCAPIDefines "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSCAPIDefines")
  set_tests_properties(unit-capi-GEOSCAPIDefines PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSCAPIDefines "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSCAPIDefines")
  set_tests_properties(unit-capi-GEOSCAPIDefines PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSCAPIDefines "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSCAPIDefines")
  set_tests_properties(unit-capi-GEOSCAPIDefines PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSCAPIDefines NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSClipByRect "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSClipByRect")
  set_tests_properties(unit-capi-GEOSClipByRect PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSClipByRect "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSClipByRect")
  set_tests_properties(unit-capi-GEOSClipByRect PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSClipByRect "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSClipByRect")
  set_tests_properties(unit-capi-GEOSClipByRect PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSClipByRect "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSClipByRect")
  set_tests_properties(unit-capi-GEOSClipByRect PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSClipByRect NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSContains "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSContains")
  set_tests_properties(unit-capi-GEOSContains PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSContains "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSContains")
  set_tests_properties(unit-capi-GEOSContains PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSContains "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSContains")
  set_tests_properties(unit-capi-GEOSContains PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSContains "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSContains")
  set_tests_properties(unit-capi-GEOSContains PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSContains NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSConvexHull "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSConvexHull")
  set_tests_properties(unit-capi-GEOSConvexHull PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSConvexHull "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSConvexHull")
  set_tests_properties(unit-capi-GEOSConvexHull PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSConvexHull "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSConvexHull")
  set_tests_properties(unit-capi-GEOSConvexHull PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSConvexHull "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSConvexHull")
  set_tests_properties(unit-capi-GEOSConvexHull PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSConvexHull NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSCoordSeq "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSCoordSeq")
  set_tests_properties(unit-capi-GEOSCoordSeq PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSCoordSeq "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSCoordSeq")
  set_tests_properties(unit-capi-GEOSCoordSeq PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSCoordSeq "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSCoordSeq")
  set_tests_properties(unit-capi-GEOSCoordSeq PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSCoordSeq "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSCoordSeq")
  set_tests_properties(unit-capi-GEOSCoordSeq PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSCoordSeq NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSCoverageUnion "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSCoverageUnion")
  set_tests_properties(unit-capi-GEOSCoverageUnion PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSCoverageUnion "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSCoverageUnion")
  set_tests_properties(unit-capi-GEOSCoverageUnion PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSCoverageUnion "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSCoverageUnion")
  set_tests_properties(unit-capi-GEOSCoverageUnion PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSCoverageUnion "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSCoverageUnion")
  set_tests_properties(unit-capi-GEOSCoverageUnion PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSCoverageUnion NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSDelaunayTriangulation "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSDelaunayTriangulation")
  set_tests_properties(unit-capi-GEOSDelaunayTriangulation PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSDelaunayTriangulation "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSDelaunayTriangulation")
  set_tests_properties(unit-capi-GEOSDelaunayTriangulation PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSDelaunayTriangulation "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSDelaunayTriangulation")
  set_tests_properties(unit-capi-GEOSDelaunayTriangulation PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSDelaunayTriangulation "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSDelaunayTriangulation")
  set_tests_properties(unit-capi-GEOSDelaunayTriangulation PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSDelaunayTriangulation NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSDistance "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSDistance")
  set_tests_properties(unit-capi-GEOSDistance PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSDistance "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSDistance")
  set_tests_properties(unit-capi-GEOSDistance PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSDistance "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSDistance")
  set_tests_properties(unit-capi-GEOSDistance PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSDistance "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSDistance")
  set_tests_properties(unit-capi-GEOSDistance PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSDistance NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSEquals "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSEquals")
  set_tests_properties(unit-capi-GEOSEquals PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSEquals "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSEquals")
  set_tests_properties(unit-capi-GEOSEquals PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSEquals "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSEquals")
  set_tests_properties(unit-capi-GEOSEquals PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSEquals "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSEquals")
  set_tests_properties(unit-capi-GEOSEquals PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSEquals NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSFrechetDistance "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSFrechetDistance")
  set_tests_properties(unit-capi-GEOSFrechetDistance PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSFrechetDistance "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSFrechetDistance")
  set_tests_properties(unit-capi-GEOSFrechetDistance PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSFrechetDistance "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSFrechetDistance")
  set_tests_properties(unit-capi-GEOSFrechetDistance PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSFrechetDistance "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSFrechetDistance")
  set_tests_properties(unit-capi-GEOSFrechetDistance PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSFrechetDistance NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeomFromWKB "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSGeomFromWKB")
  set_tests_properties(unit-capi-GEOSGeomFromWKB PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeomFromWKB "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSGeomFromWKB")
  set_tests_properties(unit-capi-GEOSGeomFromWKB PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeomFromWKB "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeomFromWKB")
  set_tests_properties(unit-capi-GEOSGeomFromWKB PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeomFromWKB "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeomFromWKB")
  set_tests_properties(unit-capi-GEOSGeomFromWKB PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeomFromWKB NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeomToWKT "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSGeomToWKT")
  set_tests_properties(unit-capi-GEOSGeomToWKT PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeomToWKT "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSGeomToWKT")
  set_tests_properties(unit-capi-GEOSGeomToWKT PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeomToWKT "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeomToWKT")
  set_tests_properties(unit-capi-GEOSGeomToWKT PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeomToWKT "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeomToWKT")
  set_tests_properties(unit-capi-GEOSGeomToWKT PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeomToWKT NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeom_createCollection "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSGeom_createCollection")
  set_tests_properties(unit-capi-GEOSGeom_createCollection PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeom_createCollection "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSGeom_createCollection")
  set_tests_properties(unit-capi-GEOSGeom_createCollection PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeom_createCollection "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeom_createCollection")
  set_tests_properties(unit-capi-GEOSGeom_createCollection PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeom_createCollection "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeom_createCollection")
  set_tests_properties(unit-capi-GEOSGeom_createCollection PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeom_createCollection NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeom_create "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSGeom_create")
  set_tests_properties(unit-capi-GEOSGeom_create PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeom_create "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSGeom_create")
  set_tests_properties(unit-capi-GEOSGeom_create PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeom_create "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeom_create")
  set_tests_properties(unit-capi-GEOSGeom_create PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeom_create "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeom_create")
  set_tests_properties(unit-capi-GEOSGeom_create PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeom_create NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeom_extent "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSGeom_extent")
  set_tests_properties(unit-capi-GEOSGeom_extent PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeom_extent "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSGeom_extent")
  set_tests_properties(unit-capi-GEOSGeom_extent PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeom_extent "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeom_extent")
  set_tests_properties(unit-capi-GEOSGeom_extent PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeom_extent "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeom_extent")
  set_tests_properties(unit-capi-GEOSGeom_extent PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeom_extent NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeom_extractUniquePoints "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSGeom_extractUniquePoints")
  set_tests_properties(unit-capi-GEOSGeom_extractUniquePoints PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeom_extractUniquePoints "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSGeom_extractUniquePoints")
  set_tests_properties(unit-capi-GEOSGeom_extractUniquePoints PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeom_extractUniquePoints "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeom_extractUniquePoints")
  set_tests_properties(unit-capi-GEOSGeom_extractUniquePoints PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeom_extractUniquePoints "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeom_extractUniquePoints")
  set_tests_properties(unit-capi-GEOSGeom_extractUniquePoints PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeom_extractUniquePoints NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGeom_setPrecision "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSGeom_setPrecision")
  set_tests_properties(unit-capi-GEOSGeom_setPrecision PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGeom_setPrecision "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSGeom_setPrecision")
  set_tests_properties(unit-capi-GEOSGeom_setPrecision PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGeom_setPrecision "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGeom_setPrecision")
  set_tests_properties(unit-capi-GEOSGeom_setPrecision PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGeom_setPrecision "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGeom_setPrecision")
  set_tests_properties(unit-capi-GEOSGeom_setPrecision PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGeom_setPrecision NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSGetCentroid "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSGetCentroid")
  set_tests_properties(unit-capi-GEOSGetCentroid PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSGetCentroid "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSGetCentroid")
  set_tests_properties(unit-capi-GEOSGetCentroid PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSGetCentroid "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSGetCentroid")
  set_tests_properties(unit-capi-GEOSGetCentroid PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSGetCentroid "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSGetCentroid")
  set_tests_properties(unit-capi-GEOSGetCentroid PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSGetCentroid NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSHausdorffDistance "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSHausdorffDistance")
  set_tests_properties(unit-capi-GEOSHausdorffDistance PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSHausdorffDistance "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSHausdorffDistance")
  set_tests_properties(unit-capi-GEOSHausdorffDistance PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSHausdorffDistance "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSHausdorffDistance")
  set_tests_properties(unit-capi-GEOSHausdorffDistance PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSHausdorffDistance "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSHausdorffDistance")
  set_tests_properties(unit-capi-GEOSHausdorffDistance PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSHausdorffDistance NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSInterpolate "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSInterpolate")
  set_tests_properties(unit-capi-GEOSInterpolate PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSInterpolate "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSInterpolate")
  set_tests_properties(unit-capi-GEOSInterpolate PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSInterpolate "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSInterpolate")
  set_tests_properties(unit-capi-GEOSInterpolate PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSInterpolate "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSInterpolate")
  set_tests_properties(unit-capi-GEOSInterpolate PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSInterpolate NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSInterrupt "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSInterrupt")
  set_tests_properties(unit-capi-GEOSInterrupt PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSInterrupt "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSInterrupt")
  set_tests_properties(unit-capi-GEOSInterrupt PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSInterrupt "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSInterrupt")
  set_tests_properties(unit-capi-GEOSInterrupt PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSInterrupt "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSInterrupt")
  set_tests_properties(unit-capi-GEOSInterrupt PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSInterrupt NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSIntersection "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSIntersection")
  set_tests_properties(unit-capi-GEOSIntersection PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSIntersection "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSIntersection")
  set_tests_properties(unit-capi-GEOSIntersection PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSIntersection "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSIntersection")
  set_tests_properties(unit-capi-GEOSIntersection PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSIntersection "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSIntersection")
  set_tests_properties(unit-capi-GEOSIntersection PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSIntersection NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSIntersects "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSIntersects")
  set_tests_properties(unit-capi-GEOSIntersects PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSIntersects "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSIntersects")
  set_tests_properties(unit-capi-GEOSIntersects PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSIntersects "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSIntersects")
  set_tests_properties(unit-capi-GEOSIntersects PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSIntersects "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSIntersects")
  set_tests_properties(unit-capi-GEOSIntersects PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSIntersects NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSLineString_Point "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSLineString_Point")
  set_tests_properties(unit-capi-GEOSLineString_Point PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSLineString_Point "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSLineString_Point")
  set_tests_properties(unit-capi-GEOSLineString_Point PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSLineString_Point "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSLineString_Point")
  set_tests_properties(unit-capi-GEOSLineString_Point PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSLineString_Point "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSLineString_Point")
  set_tests_properties(unit-capi-GEOSLineString_Point PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSLineString_Point NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSMakeValid "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSMakeValid")
  set_tests_properties(unit-capi-GEOSMakeValid PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSMakeValid "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSMakeValid")
  set_tests_properties(unit-capi-GEOSMakeValid PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSMakeValid "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSMakeValid")
  set_tests_properties(unit-capi-GEOSMakeValid PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSMakeValid "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSMakeValid")
  set_tests_properties(unit-capi-GEOSMakeValid PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSMakeValid NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSMinimumBoundingCircle "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSMinimumBoundingCircle")
  set_tests_properties(unit-capi-GEOSMinimumBoundingCircle PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSMinimumBoundingCircle "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSMinimumBoundingCircle")
  set_tests_properties(unit-capi-GEOSMinimumBoundingCircle PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSMinimumBoundingCircle "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSMinimumBoundingCircle")
  set_tests_properties(unit-capi-GEOSMinimumBoundingCircle PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSMinimumBoundingCircle "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSMinimumBoundingCircle")
  set_tests_properties(unit-capi-GEOSMinimumBoundingCircle PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSMinimumBoundingCircle NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSMinimumClearance "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSMinimumClearance")
  set_tests_properties(unit-capi-GEOSMinimumClearance PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSMinimumClearance "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSMinimumClearance")
  set_tests_properties(unit-capi-GEOSMinimumClearance PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSMinimumClearance "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSMinimumClearance")
  set_tests_properties(unit-capi-GEOSMinimumClearance PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSMinimumClearance "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSMinimumClearance")
  set_tests_properties(unit-capi-GEOSMinimumClearance PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSMinimumClearance NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSMinimumRectangle "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSMinimumRectangle")
  set_tests_properties(unit-capi-GEOSMinimumRectangle PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSMinimumRectangle "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSMinimumRectangle")
  set_tests_properties(unit-capi-GEOSMinimumRectangle PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSMinimumRectangle "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSMinimumRectangle")
  set_tests_properties(unit-capi-GEOSMinimumRectangle PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSMinimumRectangle "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSMinimumRectangle")
  set_tests_properties(unit-capi-GEOSMinimumRectangle PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSMinimumRectangle NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSMinimumWidth "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSMinimumWidth")
  set_tests_properties(unit-capi-GEOSMinimumWidth PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSMinimumWidth "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSMinimumWidth")
  set_tests_properties(unit-capi-GEOSMinimumWidth PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSMinimumWidth "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSMinimumWidth")
  set_tests_properties(unit-capi-GEOSMinimumWidth PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSMinimumWidth "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSMinimumWidth")
  set_tests_properties(unit-capi-GEOSMinimumWidth PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSMinimumWidth NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSNearestPoints "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSNearestPoints")
  set_tests_properties(unit-capi-GEOSNearestPoints PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSNearestPoints "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSNearestPoints")
  set_tests_properties(unit-capi-GEOSNearestPoints PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSNearestPoints "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSNearestPoints")
  set_tests_properties(unit-capi-GEOSNearestPoints PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSNearestPoints "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSNearestPoints")
  set_tests_properties(unit-capi-GEOSNearestPoints PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSNearestPoints NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSNode "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSNode")
  set_tests_properties(unit-capi-GEOSNode PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSNode "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSNode")
  set_tests_properties(unit-capi-GEOSNode PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSNode "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSNode")
  set_tests_properties(unit-capi-GEOSNode PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSNode "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSNode")
  set_tests_properties(unit-capi-GEOSNode PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSNode NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSOffsetCurve "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSOffsetCurve")
  set_tests_properties(unit-capi-GEOSOffsetCurve PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSOffsetCurve "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSOffsetCurve")
  set_tests_properties(unit-capi-GEOSOffsetCurve PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSOffsetCurve "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSOffsetCurve")
  set_tests_properties(unit-capi-GEOSOffsetCurve PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSOffsetCurve "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSOffsetCurve")
  set_tests_properties(unit-capi-GEOSOffsetCurve PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSOffsetCurve NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSOrientationIndex "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSOrientationIndex")
  set_tests_properties(unit-capi-GEOSOrientationIndex PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSOrientationIndex "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSOrientationIndex")
  set_tests_properties(unit-capi-GEOSOrientationIndex PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSOrientationIndex "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSOrientationIndex")
  set_tests_properties(unit-capi-GEOSOrientationIndex PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSOrientationIndex "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSOrientationIndex")
  set_tests_properties(unit-capi-GEOSOrientationIndex PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSOrientationIndex NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSPointOnSurface "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSPointOnSurface")
  set_tests_properties(unit-capi-GEOSPointOnSurface PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSPointOnSurface "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSPointOnSurface")
  set_tests_properties(unit-capi-GEOSPointOnSurface PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSPointOnSurface "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSPointOnSurface")
  set_tests_properties(unit-capi-GEOSPointOnSurface PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSPointOnSurface "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSPointOnSurface")
  set_tests_properties(unit-capi-GEOSPointOnSurface PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSPointOnSurface NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSPolygonize "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSPolygonize")
  set_tests_properties(unit-capi-GEOSPolygonize PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSPolygonize "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSPolygonize")
  set_tests_properties(unit-capi-GEOSPolygonize PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSPolygonize "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSPolygonize")
  set_tests_properties(unit-capi-GEOSPolygonize PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSPolygonize "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSPolygonize")
  set_tests_properties(unit-capi-GEOSPolygonize PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSPolygonize NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSPreparedGeometry "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSPreparedGeometry")
  set_tests_properties(unit-capi-GEOSPreparedGeometry PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSPreparedGeometry "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSPreparedGeometry")
  set_tests_properties(unit-capi-GEOSPreparedGeometry PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSPreparedGeometry "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSPreparedGeometry")
  set_tests_properties(unit-capi-GEOSPreparedGeometry PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSPreparedGeometry "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSPreparedGeometry")
  set_tests_properties(unit-capi-GEOSPreparedGeometry PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSPreparedGeometry NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSRelateBoundaryNodeRule "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSRelateBoundaryNodeRule")
  set_tests_properties(unit-capi-GEOSRelateBoundaryNodeRule PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSRelateBoundaryNodeRule "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSRelateBoundaryNodeRule")
  set_tests_properties(unit-capi-GEOSRelateBoundaryNodeRule PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSRelateBoundaryNodeRule "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSRelateBoundaryNodeRule")
  set_tests_properties(unit-capi-GEOSRelateBoundaryNodeRule PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSRelateBoundaryNodeRule "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSRelateBoundaryNodeRule")
  set_tests_properties(unit-capi-GEOSRelateBoundaryNodeRule PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSRelateBoundaryNodeRule NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSRelatePatternMatch "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSRelatePatternMatch")
  set_tests_properties(unit-capi-GEOSRelatePatternMatch PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSRelatePatternMatch "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSRelatePatternMatch")
  set_tests_properties(unit-capi-GEOSRelatePatternMatch PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSRelatePatternMatch "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSRelatePatternMatch")
  set_tests_properties(unit-capi-GEOSRelatePatternMatch PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSRelatePatternMatch "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSRelatePatternMatch")
  set_tests_properties(unit-capi-GEOSRelatePatternMatch PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSRelatePatternMatch NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSReverse "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSReverse")
  set_tests_properties(unit-capi-GEOSReverse PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSReverse "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSReverse")
  set_tests_properties(unit-capi-GEOSReverse PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSReverse "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSReverse")
  set_tests_properties(unit-capi-GEOSReverse PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSReverse "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSReverse")
  set_tests_properties(unit-capi-GEOSReverse PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSReverse NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSSTRtree "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSSTRtree")
  set_tests_properties(unit-capi-GEOSSTRtree PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSSTRtree "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSSTRtree")
  set_tests_properties(unit-capi-GEOSSTRtree PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSSTRtree "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSSTRtree")
  set_tests_properties(unit-capi-GEOSSTRtree PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSSTRtree "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSSTRtree")
  set_tests_properties(unit-capi-GEOSSTRtree PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSSTRtree NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSSegmentIntersection "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSSegmentIntersection")
  set_tests_properties(unit-capi-GEOSSegmentIntersection PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSSegmentIntersection "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSSegmentIntersection")
  set_tests_properties(unit-capi-GEOSSegmentIntersection PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSSegmentIntersection "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSSegmentIntersection")
  set_tests_properties(unit-capi-GEOSSegmentIntersection PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSSegmentIntersection "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSSegmentIntersection")
  set_tests_properties(unit-capi-GEOSSegmentIntersection PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSSegmentIntersection NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSSharedPaths "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSSharedPaths")
  set_tests_properties(unit-capi-GEOSSharedPaths PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSSharedPaths "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSSharedPaths")
  set_tests_properties(unit-capi-GEOSSharedPaths PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSSharedPaths "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSSharedPaths")
  set_tests_properties(unit-capi-GEOSSharedPaths PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSSharedPaths "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSSharedPaths")
  set_tests_properties(unit-capi-GEOSSharedPaths PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSSharedPaths NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSSimplify "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSSimplify")
  set_tests_properties(unit-capi-GEOSSimplify PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSSimplify "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSSimplify")
  set_tests_properties(unit-capi-GEOSSimplify PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSSimplify "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSSimplify")
  set_tests_properties(unit-capi-GEOSSimplify PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSSimplify "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSSimplify")
  set_tests_properties(unit-capi-GEOSSimplify PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSSimplify NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSSnap "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSSnap")
  set_tests_properties(unit-capi-GEOSSnap PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSSnap "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSSnap")
  set_tests_properties(unit-capi-GEOSSnap PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSSnap "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSSnap")
  set_tests_properties(unit-capi-GEOSSnap PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSSnap "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSSnap")
  set_tests_properties(unit-capi-GEOSSnap PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSSnap NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSUnaryUnion "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSUnaryUnion")
  set_tests_properties(unit-capi-GEOSUnaryUnion PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSUnaryUnion "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSUnaryUnion")
  set_tests_properties(unit-capi-GEOSUnaryUnion PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSUnaryUnion "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSUnaryUnion")
  set_tests_properties(unit-capi-GEOSUnaryUnion PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSUnaryUnion "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSUnaryUnion")
  set_tests_properties(unit-capi-GEOSUnaryUnion PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSUnaryUnion NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSUserData "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSUserData")
  set_tests_properties(unit-capi-GEOSUserData PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSUserData "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSUserData")
  set_tests_properties(unit-capi-GEOSUserData PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSUserData "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSUserData")
  set_tests_properties(unit-capi-GEOSUserData PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSUserData "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSUserData")
  set_tests_properties(unit-capi-GEOSUserData PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSUserData NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSVoronoiDiagram "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSVoronoiDiagram")
  set_tests_properties(unit-capi-GEOSVoronoiDiagram PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSVoronoiDiagram "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSVoronoiDiagram")
  set_tests_properties(unit-capi-GEOSVoronoiDiagram PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSVoronoiDiagram "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSVoronoiDiagram")
  set_tests_properties(unit-capi-GEOSVoronoiDiagram PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSVoronoiDiagram "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSVoronoiDiagram")
  set_tests_properties(unit-capi-GEOSVoronoiDiagram PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSVoronoiDiagram NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSWithin "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSWithin")
  set_tests_properties(unit-capi-GEOSWithin PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSWithin "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSWithin")
  set_tests_properties(unit-capi-GEOSWithin PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSWithin "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSWithin")
  set_tests_properties(unit-capi-GEOSWithin PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSWithin "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSWithin")
  set_tests_properties(unit-capi-GEOSWithin PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSWithin NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSisClosed "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSisClosed")
  set_tests_properties(unit-capi-GEOSisClosed PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSisClosed "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSisClosed")
  set_tests_properties(unit-capi-GEOSisClosed PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSisClosed "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSisClosed")
  set_tests_properties(unit-capi-GEOSisClosed PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSisClosed "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSisClosed")
  set_tests_properties(unit-capi-GEOSisClosed PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSisClosed NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-capi-GEOSisValidDetail "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "capi::GEOSisValidDetail")
  set_tests_properties(unit-capi-GEOSisValidDetail PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-capi-GEOSisValidDetail "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "capi::GEOSisValidDetail")
  set_tests_properties(unit-capi-GEOSisValidDetail PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-capi-GEOSisValidDetail "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "capi::GEOSisValidDetail")
  set_tests_properties(unit-capi-GEOSisValidDetail PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-capi-GEOSisValidDetail "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "capi::GEOSisValidDetail")
  set_tests_properties(unit-capi-GEOSisValidDetail PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-capi-GEOSisValidDetail NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-CoordinateArraySequenceFactory "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::CoordinateArraySequenceFactory")
  set_tests_properties(unit-geom-CoordinateArraySequenceFactory PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-CoordinateArraySequenceFactory "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::CoordinateArraySequenceFactory")
  set_tests_properties(unit-geom-CoordinateArraySequenceFactory PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-CoordinateArraySequenceFactory "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::CoordinateArraySequenceFactory")
  set_tests_properties(unit-geom-CoordinateArraySequenceFactory PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-CoordinateArraySequenceFactory "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::CoordinateArraySequenceFactory")
  set_tests_properties(unit-geom-CoordinateArraySequenceFactory PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-CoordinateArraySequenceFactory NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-CoordinateArraySequence "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::CoordinateArraySequence")
  set_tests_properties(unit-geom-CoordinateArraySequence PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-CoordinateArraySequence "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::CoordinateArraySequence")
  set_tests_properties(unit-geom-CoordinateArraySequence PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-CoordinateArraySequence "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::CoordinateArraySequence")
  set_tests_properties(unit-geom-CoordinateArraySequence PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-CoordinateArraySequence "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::CoordinateArraySequence")
  set_tests_properties(unit-geom-CoordinateArraySequence PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-CoordinateArraySequence NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-CoordinateList "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::CoordinateList")
  set_tests_properties(unit-geom-CoordinateList PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-CoordinateList "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::CoordinateList")
  set_tests_properties(unit-geom-CoordinateList PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-CoordinateList "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::CoordinateList")
  set_tests_properties(unit-geom-CoordinateList PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-CoordinateList "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::CoordinateList")
  set_tests_properties(unit-geom-CoordinateList PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-CoordinateList NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-Coordinate "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::Coordinate")
  set_tests_properties(unit-geom-Coordinate PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-Coordinate "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::Coordinate")
  set_tests_properties(unit-geom-Coordinate PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-Coordinate "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::Coordinate")
  set_tests_properties(unit-geom-Coordinate PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-Coordinate "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::Coordinate")
  set_tests_properties(unit-geom-Coordinate PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-Coordinate NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-Dimension "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::Dimension")
  set_tests_properties(unit-geom-Dimension PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-Dimension "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::Dimension")
  set_tests_properties(unit-geom-Dimension PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-Dimension "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::Dimension")
  set_tests_properties(unit-geom-Dimension PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-Dimension "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::Dimension")
  set_tests_properties(unit-geom-Dimension PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-Dimension NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-Envelope "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::Envelope")
  set_tests_properties(unit-geom-Envelope PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-Envelope "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::Envelope")
  set_tests_properties(unit-geom-Envelope PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-Envelope "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::Envelope")
  set_tests_properties(unit-geom-Envelope PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-Envelope "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::Envelope")
  set_tests_properties(unit-geom-Envelope PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-Envelope NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-FixedSizeCoordinateSequence "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::FixedSizeCoordinateSequence")
  set_tests_properties(unit-geom-FixedSizeCoordinateSequence PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-FixedSizeCoordinateSequence "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::FixedSizeCoordinateSequence")
  set_tests_properties(unit-geom-FixedSizeCoordinateSequence PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-FixedSizeCoordinateSequence "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::FixedSizeCoordinateSequence")
  set_tests_properties(unit-geom-FixedSizeCoordinateSequence PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-FixedSizeCoordinateSequence "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::FixedSizeCoordinateSequence")
  set_tests_properties(unit-geom-FixedSizeCoordinateSequence PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-FixedSizeCoordinateSequence NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-Geometry-clone "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::Geometry::clone")
  set_tests_properties(unit-geom-Geometry-clone PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-Geometry-clone "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::Geometry::clone")
  set_tests_properties(unit-geom-Geometry-clone PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-Geometry-clone "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::Geometry::clone")
  set_tests_properties(unit-geom-Geometry-clone PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-Geometry-clone "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::Geometry::clone")
  set_tests_properties(unit-geom-Geometry-clone PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-Geometry-clone NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-Geometry-covers "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::Geometry::covers")
  set_tests_properties(unit-geom-Geometry-covers PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-Geometry-covers "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::Geometry::covers")
  set_tests_properties(unit-geom-Geometry-covers PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-Geometry-covers "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::Geometry::covers")
  set_tests_properties(unit-geom-Geometry-covers PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-Geometry-covers "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::Geometry::covers")
  set_tests_properties(unit-geom-Geometry-covers PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-Geometry-covers NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-Geometry-equals "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::Geometry::equals")
  set_tests_properties(unit-geom-Geometry-equals PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-Geometry-equals "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::Geometry::equals")
  set_tests_properties(unit-geom-Geometry-equals PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-Geometry-equals "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::Geometry::equals")
  set_tests_properties(unit-geom-Geometry-equals PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-Geometry-equals "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::Geometry::equals")
  set_tests_properties(unit-geom-Geometry-equals PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-Geometry-equals NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-Geometry-isRectangle "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::Geometry::isRectangle")
  set_tests_properties(unit-geom-Geometry-isRectangle PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-Geometry-isRectangle "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::Geometry::isRectangle")
  set_tests_properties(unit-geom-Geometry-isRectangle PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-Geometry-isRectangle "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::Geometry::isRectangle")
  set_tests_properties(unit-geom-Geometry-isRectangle PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-Geometry-isRectangle "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::Geometry::isRectangle")
  set_tests_properties(unit-geom-Geometry-isRectangle PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-Geometry-isRectangle NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-Geometry-normalize "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::Geometry::normalize")
  set_tests_properties(unit-geom-Geometry-normalize PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-Geometry-normalize "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::Geometry::normalize")
  set_tests_properties(unit-geom-Geometry-normalize PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-Geometry-normalize "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::Geometry::normalize")
  set_tests_properties(unit-geom-Geometry-normalize PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-Geometry-normalize "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::Geometry::normalize")
  set_tests_properties(unit-geom-Geometry-normalize PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-Geometry-normalize NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-Geometry-touches "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::Geometry::touches")
  set_tests_properties(unit-geom-Geometry-touches PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-Geometry-touches "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::Geometry::touches")
  set_tests_properties(unit-geom-Geometry-touches PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-Geometry-touches "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::Geometry::touches")
  set_tests_properties(unit-geom-Geometry-touches PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-Geometry-touches "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::Geometry::touches")
  set_tests_properties(unit-geom-Geometry-touches PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-Geometry-touches NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-GeometryCollection "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::GeometryCollection")
  set_tests_properties(unit-geom-GeometryCollection PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-GeometryCollection "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::GeometryCollection")
  set_tests_properties(unit-geom-GeometryCollection PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-GeometryCollection "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::GeometryCollection")
  set_tests_properties(unit-geom-GeometryCollection PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-GeometryCollection "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::GeometryCollection")
  set_tests_properties(unit-geom-GeometryCollection PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-GeometryCollection NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-GeometryComponentFilter "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::GeometryComponentFilter")
  set_tests_properties(unit-geom-GeometryComponentFilter PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-GeometryComponentFilter "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::GeometryComponentFilter")
  set_tests_properties(unit-geom-GeometryComponentFilter PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-GeometryComponentFilter "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::GeometryComponentFilter")
  set_tests_properties(unit-geom-GeometryComponentFilter PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-GeometryComponentFilter "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::GeometryComponentFilter")
  set_tests_properties(unit-geom-GeometryComponentFilter PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-GeometryComponentFilter NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-GeometryFactory "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::GeometryFactory")
  set_tests_properties(unit-geom-GeometryFactory PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-GeometryFactory "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::GeometryFactory")
  set_tests_properties(unit-geom-GeometryFactory PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-GeometryFactory "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::GeometryFactory")
  set_tests_properties(unit-geom-GeometryFactory PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-GeometryFactory "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::GeometryFactory")
  set_tests_properties(unit-geom-GeometryFactory PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-GeometryFactory NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-GeometryFilter "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::GeometryFilter")
  set_tests_properties(unit-geom-GeometryFilter PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-GeometryFilter "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::GeometryFilter")
  set_tests_properties(unit-geom-GeometryFilter PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-GeometryFilter "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::GeometryFilter")
  set_tests_properties(unit-geom-GeometryFilter PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-GeometryFilter "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::GeometryFilter")
  set_tests_properties(unit-geom-GeometryFilter PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-GeometryFilter NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-IntersectionMatrix "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::IntersectionMatrix")
  set_tests_properties(unit-geom-IntersectionMatrix PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-IntersectionMatrix "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::IntersectionMatrix")
  set_tests_properties(unit-geom-IntersectionMatrix PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-IntersectionMatrix "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::IntersectionMatrix")
  set_tests_properties(unit-geom-IntersectionMatrix PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-IntersectionMatrix "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::IntersectionMatrix")
  set_tests_properties(unit-geom-IntersectionMatrix PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-IntersectionMatrix NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-LineSegment "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::LineSegment")
  set_tests_properties(unit-geom-LineSegment PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-LineSegment "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::LineSegment")
  set_tests_properties(unit-geom-LineSegment PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-LineSegment "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::LineSegment")
  set_tests_properties(unit-geom-LineSegment PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-LineSegment "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::LineSegment")
  set_tests_properties(unit-geom-LineSegment PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-LineSegment NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-LineString "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::LineString")
  set_tests_properties(unit-geom-LineString PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-LineString "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::LineString")
  set_tests_properties(unit-geom-LineString PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-LineString "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::LineString")
  set_tests_properties(unit-geom-LineString PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-LineString "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::LineString")
  set_tests_properties(unit-geom-LineString PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-LineString NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-LinearRing "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::LinearRing")
  set_tests_properties(unit-geom-LinearRing PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-LinearRing "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::LinearRing")
  set_tests_properties(unit-geom-LinearRing PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-LinearRing "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::LinearRing")
  set_tests_properties(unit-geom-LinearRing PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-LinearRing "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::LinearRing")
  set_tests_properties(unit-geom-LinearRing PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-LinearRing NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-Location "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::Location")
  set_tests_properties(unit-geom-Location PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-Location "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::Location")
  set_tests_properties(unit-geom-Location PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-Location "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::Location")
  set_tests_properties(unit-geom-Location PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-Location "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::Location")
  set_tests_properties(unit-geom-Location PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-Location NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-MultiLineString "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::MultiLineString")
  set_tests_properties(unit-geom-MultiLineString PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-MultiLineString "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::MultiLineString")
  set_tests_properties(unit-geom-MultiLineString PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-MultiLineString "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::MultiLineString")
  set_tests_properties(unit-geom-MultiLineString PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-MultiLineString "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::MultiLineString")
  set_tests_properties(unit-geom-MultiLineString PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-MultiLineString NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-MultiPoint "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::MultiPoint")
  set_tests_properties(unit-geom-MultiPoint PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-MultiPoint "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::MultiPoint")
  set_tests_properties(unit-geom-MultiPoint PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-MultiPoint "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::MultiPoint")
  set_tests_properties(unit-geom-MultiPoint PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-MultiPoint "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::MultiPoint")
  set_tests_properties(unit-geom-MultiPoint PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-MultiPoint NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-MultiPolygon "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::MultiPolygon")
  set_tests_properties(unit-geom-MultiPolygon PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-MultiPolygon "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::MultiPolygon")
  set_tests_properties(unit-geom-MultiPolygon PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-MultiPolygon "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::MultiPolygon")
  set_tests_properties(unit-geom-MultiPolygon PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-MultiPolygon "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::MultiPolygon")
  set_tests_properties(unit-geom-MultiPolygon PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-MultiPolygon NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-Point "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::Point")
  set_tests_properties(unit-geom-Point PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-Point "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::Point")
  set_tests_properties(unit-geom-Point PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-Point "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::Point")
  set_tests_properties(unit-geom-Point PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-Point "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::Point")
  set_tests_properties(unit-geom-Point PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-Point NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-Polygon "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::Polygon")
  set_tests_properties(unit-geom-Polygon PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-Polygon "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::Polygon")
  set_tests_properties(unit-geom-Polygon PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-Polygon "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::Polygon")
  set_tests_properties(unit-geom-Polygon PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-Polygon "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::Polygon")
  set_tests_properties(unit-geom-Polygon PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-Polygon NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-PrecisionModel "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::PrecisionModel")
  set_tests_properties(unit-geom-PrecisionModel PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-PrecisionModel "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::PrecisionModel")
  set_tests_properties(unit-geom-PrecisionModel PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-PrecisionModel "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::PrecisionModel")
  set_tests_properties(unit-geom-PrecisionModel PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-PrecisionModel "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::PrecisionModel")
  set_tests_properties(unit-geom-PrecisionModel PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-PrecisionModel NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-Triangle "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::Triangle")
  set_tests_properties(unit-geom-Triangle PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-Triangle "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::Triangle")
  set_tests_properties(unit-geom-Triangle PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-Triangle "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::Triangle")
  set_tests_properties(unit-geom-Triangle PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-Triangle "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::Triangle")
  set_tests_properties(unit-geom-Triangle PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-Triangle NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-prep-PreparedGeometry-touches "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::prep::PreparedGeometry::touches")
  set_tests_properties(unit-geom-prep-PreparedGeometry-touches PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-prep-PreparedGeometry-touches "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::prep::PreparedGeometry::touches")
  set_tests_properties(unit-geom-prep-PreparedGeometry-touches PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-prep-PreparedGeometry-touches "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::prep::PreparedGeometry::touches")
  set_tests_properties(unit-geom-prep-PreparedGeometry-touches PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-prep-PreparedGeometry-touches "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::prep::PreparedGeometry::touches")
  set_tests_properties(unit-geom-prep-PreparedGeometry-touches PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-prep-PreparedGeometry-touches NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-prep-PreparedGeometryFactory "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::prep::PreparedGeometryFactory")
  set_tests_properties(unit-geom-prep-PreparedGeometryFactory PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-prep-PreparedGeometryFactory "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::prep::PreparedGeometryFactory")
  set_tests_properties(unit-geom-prep-PreparedGeometryFactory PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-prep-PreparedGeometryFactory "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::prep::PreparedGeometryFactory")
  set_tests_properties(unit-geom-prep-PreparedGeometryFactory PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-prep-PreparedGeometryFactory "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::prep::PreparedGeometryFactory")
  set_tests_properties(unit-geom-prep-PreparedGeometryFactory PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-prep-PreparedGeometryFactory NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-geom-util-GeometryExtracter "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::geom::util::GeometryExtracter")
  set_tests_properties(unit-geom-util-GeometryExtracter PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-geom-util-GeometryExtracter "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::geom::util::GeometryExtracter")
  set_tests_properties(unit-geom-util-GeometryExtracter PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-geom-util-GeometryExtracter "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::geom::util::GeometryExtracter")
  set_tests_properties(unit-geom-util-GeometryExtracter PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-geom-util-GeometryExtracter "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::geom::util::GeometryExtracter")
  set_tests_properties(unit-geom-util-GeometryExtracter PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-geom-util-GeometryExtracter NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-index-quadtree-DoubleBits "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::index::quadtree::DoubleBits")
  set_tests_properties(unit-index-quadtree-DoubleBits PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-index-quadtree-DoubleBits "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::index::quadtree::DoubleBits")
  set_tests_properties(unit-index-quadtree-DoubleBits PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-index-quadtree-DoubleBits "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::index::quadtree::DoubleBits")
  set_tests_properties(unit-index-quadtree-DoubleBits PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-index-quadtree-DoubleBits "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::index::quadtree::DoubleBits")
  set_tests_properties(unit-index-quadtree-DoubleBits PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-index-quadtree-DoubleBits NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-index-strtree-SIRtree "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::index::strtree::SIRtree")
  set_tests_properties(unit-index-strtree-SIRtree PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-index-strtree-SIRtree "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::index::strtree::SIRtree")
  set_tests_properties(unit-index-strtree-SIRtree PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-index-strtree-SIRtree "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::index::strtree::SIRtree")
  set_tests_properties(unit-index-strtree-SIRtree PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-index-strtree-SIRtree "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::index::strtree::SIRtree")
  set_tests_properties(unit-index-strtree-SIRtree PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-index-strtree-SIRtree NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-io-ByteOrderValues "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::io::ByteOrderValues")
  set_tests_properties(unit-io-ByteOrderValues PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-io-ByteOrderValues "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::io::ByteOrderValues")
  set_tests_properties(unit-io-ByteOrderValues PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-io-ByteOrderValues "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::io::ByteOrderValues")
  set_tests_properties(unit-io-ByteOrderValues PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-io-ByteOrderValues "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::io::ByteOrderValues")
  set_tests_properties(unit-io-ByteOrderValues PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-io-ByteOrderValues NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-io-WKBReader "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::io::WKBReader")
  set_tests_properties(unit-io-WKBReader PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-io-WKBReader "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::io::WKBReader")
  set_tests_properties(unit-io-WKBReader PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-io-WKBReader "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::io::WKBReader")
  set_tests_properties(unit-io-WKBReader PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-io-WKBReader "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::io::WKBReader")
  set_tests_properties(unit-io-WKBReader PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-io-WKBReader NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-io-WKBWriter "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::io::WKBWriter")
  set_tests_properties(unit-io-WKBWriter PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-io-WKBWriter "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::io::WKBWriter")
  set_tests_properties(unit-io-WKBWriter PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-io-WKBWriter "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::io::WKBWriter")
  set_tests_properties(unit-io-WKBWriter PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-io-WKBWriter "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::io::WKBWriter")
  set_tests_properties(unit-io-WKBWriter PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-io-WKBWriter NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-io-WKTReader "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::io::WKTReader")
  set_tests_properties(unit-io-WKTReader PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-io-WKTReader "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::io::WKTReader")
  set_tests_properties(unit-io-WKTReader PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-io-WKTReader "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::io::WKTReader")
  set_tests_properties(unit-io-WKTReader PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-io-WKTReader "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::io::WKTReader")
  set_tests_properties(unit-io-WKTReader PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-io-WKTReader NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-io-WKTWriter "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::io::WKTWriter")
  set_tests_properties(unit-io-WKTWriter PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-io-WKTWriter "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::io::WKTWriter")
  set_tests_properties(unit-io-WKTWriter PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-io-WKTWriter "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::io::WKTWriter")
  set_tests_properties(unit-io-WKTWriter PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-io-WKTWriter "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::io::WKTWriter")
  set_tests_properties(unit-io-WKTWriter PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-io-WKTWriter NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-io-Writer "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::io::Writer")
  set_tests_properties(unit-io-Writer PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-io-Writer "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::io::Writer")
  set_tests_properties(unit-io-Writer PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-io-Writer "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::io::Writer")
  set_tests_properties(unit-io-Writer PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-io-Writer "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::io::Writer")
  set_tests_properties(unit-io-Writer PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-io-Writer NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-linearref-LengthIndexedLine "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::linearref::LengthIndexedLine")
  set_tests_properties(unit-linearref-LengthIndexedLine PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-linearref-LengthIndexedLine "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::linearref::LengthIndexedLine")
  set_tests_properties(unit-linearref-LengthIndexedLine PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-linearref-LengthIndexedLine "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::linearref::LengthIndexedLine")
  set_tests_properties(unit-linearref-LengthIndexedLine PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-linearref-LengthIndexedLine "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::linearref::LengthIndexedLine")
  set_tests_properties(unit-linearref-LengthIndexedLine PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-linearref-LengthIndexedLine NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-noding-BasicSegmentString "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::noding::BasicSegmentString")
  set_tests_properties(unit-noding-BasicSegmentString PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-noding-BasicSegmentString "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::noding::BasicSegmentString")
  set_tests_properties(unit-noding-BasicSegmentString PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-noding-BasicSegmentString "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::noding::BasicSegmentString")
  set_tests_properties(unit-noding-BasicSegmentString PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-noding-BasicSegmentString "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::noding::BasicSegmentString")
  set_tests_properties(unit-noding-BasicSegmentString PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-noding-BasicSegmentString NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-noding-NodedSegmentString "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::noding::NodedSegmentString")
  set_tests_properties(unit-noding-NodedSegmentString PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-noding-NodedSegmentString "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::noding::NodedSegmentString")
  set_tests_properties(unit-noding-NodedSegmentString PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-noding-NodedSegmentString "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::noding::NodedSegmentString")
  set_tests_properties(unit-noding-NodedSegmentString PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-noding-NodedSegmentString "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::noding::NodedSegmentString")
  set_tests_properties(unit-noding-NodedSegmentString PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-noding-NodedSegmentString NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-noding-OrientedCoordinateArray "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::noding::OrientedCoordinateArray")
  set_tests_properties(unit-noding-OrientedCoordinateArray PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-noding-OrientedCoordinateArray "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::noding::OrientedCoordinateArray")
  set_tests_properties(unit-noding-OrientedCoordinateArray PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-noding-OrientedCoordinateArray "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::noding::OrientedCoordinateArray")
  set_tests_properties(unit-noding-OrientedCoordinateArray PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-noding-OrientedCoordinateArray "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::noding::OrientedCoordinateArray")
  set_tests_properties(unit-noding-OrientedCoordinateArray PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-noding-OrientedCoordinateArray NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-noding-SegmentNode "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::noding::SegmentNode")
  set_tests_properties(unit-noding-SegmentNode PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-noding-SegmentNode "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::noding::SegmentNode")
  set_tests_properties(unit-noding-SegmentNode PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-noding-SegmentNode "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::noding::SegmentNode")
  set_tests_properties(unit-noding-SegmentNode PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-noding-SegmentNode "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::noding::SegmentNode")
  set_tests_properties(unit-noding-SegmentNode PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-noding-SegmentNode NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-noding-SegmentPointComparator "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::noding::SegmentPointComparator")
  set_tests_properties(unit-noding-SegmentPointComparator PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-noding-SegmentPointComparator "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::noding::SegmentPointComparator")
  set_tests_properties(unit-noding-SegmentPointComparator PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-noding-SegmentPointComparator "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::noding::SegmentPointComparator")
  set_tests_properties(unit-noding-SegmentPointComparator PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-noding-SegmentPointComparator "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::noding::SegmentPointComparator")
  set_tests_properties(unit-noding-SegmentPointComparator PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-noding-SegmentPointComparator NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-noding-snapround-HotPixel "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::noding::snapround::HotPixel")
  set_tests_properties(unit-noding-snapround-HotPixel PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-noding-snapround-HotPixel "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::noding::snapround::HotPixel")
  set_tests_properties(unit-noding-snapround-HotPixel PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-noding-snapround-HotPixel "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::noding::snapround::HotPixel")
  set_tests_properties(unit-noding-snapround-HotPixel PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-noding-snapround-HotPixel "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::noding::snapround::HotPixel")
  set_tests_properties(unit-noding-snapround-HotPixel PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-noding-snapround-HotPixel NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-noding-snapround-MCIndexSnapRounder "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::noding::snapround::MCIndexSnapRounder")
  set_tests_properties(unit-noding-snapround-MCIndexSnapRounder PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-noding-snapround-MCIndexSnapRounder "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::noding::snapround::MCIndexSnapRounder")
  set_tests_properties(unit-noding-snapround-MCIndexSnapRounder PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-noding-snapround-MCIndexSnapRounder "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::noding::snapround::MCIndexSnapRounder")
  set_tests_properties(unit-noding-snapround-MCIndexSnapRounder PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-noding-snapround-MCIndexSnapRounder "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::noding::snapround::MCIndexSnapRounder")
  set_tests_properties(unit-noding-snapround-MCIndexSnapRounder PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-noding-snapround-MCIndexSnapRounder NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-IsSimpleOp "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::operation::IsSimpleOp")
  set_tests_properties(unit-operation-IsSimpleOp PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-IsSimpleOp "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::operation::IsSimpleOp")
  set_tests_properties(unit-operation-IsSimpleOp PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-IsSimpleOp "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::IsSimpleOp")
  set_tests_properties(unit-operation-IsSimpleOp PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-IsSimpleOp "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::IsSimpleOp")
  set_tests_properties(unit-operation-IsSimpleOp PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-IsSimpleOp NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-buffer-BufferBuilder "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::operation::buffer::BufferBuilder")
  set_tests_properties(unit-operation-buffer-BufferBuilder PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-buffer-BufferBuilder "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::operation::buffer::BufferBuilder")
  set_tests_properties(unit-operation-buffer-BufferBuilder PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-buffer-BufferBuilder "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::buffer::BufferBuilder")
  set_tests_properties(unit-operation-buffer-BufferBuilder PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-buffer-BufferBuilder "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::buffer::BufferBuilder")
  set_tests_properties(unit-operation-buffer-BufferBuilder PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-buffer-BufferBuilder NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-buffer-BufferOp "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::operation::buffer::BufferOp")
  set_tests_properties(unit-operation-buffer-BufferOp PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-buffer-BufferOp "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::operation::buffer::BufferOp")
  set_tests_properties(unit-operation-buffer-BufferOp PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-buffer-BufferOp "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::buffer::BufferOp")
  set_tests_properties(unit-operation-buffer-BufferOp PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-buffer-BufferOp "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::buffer::BufferOp")
  set_tests_properties(unit-operation-buffer-BufferOp PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-buffer-BufferOp NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-buffer-BufferParameters "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::operation::buffer::BufferParameters")
  set_tests_properties(unit-operation-buffer-BufferParameters PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-buffer-BufferParameters "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::operation::buffer::BufferParameters")
  set_tests_properties(unit-operation-buffer-BufferParameters PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-buffer-BufferParameters "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::buffer::BufferParameters")
  set_tests_properties(unit-operation-buffer-BufferParameters PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-buffer-BufferParameters "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::buffer::BufferParameters")
  set_tests_properties(unit-operation-buffer-BufferParameters PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-buffer-BufferParameters NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-distance-DistanceOp "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::operation::distance::DistanceOp")
  set_tests_properties(unit-operation-distance-DistanceOp PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-distance-DistanceOp "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::operation::distance::DistanceOp")
  set_tests_properties(unit-operation-distance-DistanceOp PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-distance-DistanceOp "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::distance::DistanceOp")
  set_tests_properties(unit-operation-distance-DistanceOp PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-distance-DistanceOp "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::distance::DistanceOp")
  set_tests_properties(unit-operation-distance-DistanceOp PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-distance-DistanceOp NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-distance-IndexedFacetDistance "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::operation::distance::IndexedFacetDistance")
  set_tests_properties(unit-operation-distance-IndexedFacetDistance PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-distance-IndexedFacetDistance "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::operation::distance::IndexedFacetDistance")
  set_tests_properties(unit-operation-distance-IndexedFacetDistance PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-distance-IndexedFacetDistance "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::distance::IndexedFacetDistance")
  set_tests_properties(unit-operation-distance-IndexedFacetDistance PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-distance-IndexedFacetDistance "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::distance::IndexedFacetDistance")
  set_tests_properties(unit-operation-distance-IndexedFacetDistance PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-distance-IndexedFacetDistance NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-geounion-CascadedPolygonUnion "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::operation::geounion::CascadedPolygonUnion")
  set_tests_properties(unit-operation-geounion-CascadedPolygonUnion PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-geounion-CascadedPolygonUnion "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::operation::geounion::CascadedPolygonUnion")
  set_tests_properties(unit-operation-geounion-CascadedPolygonUnion PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-geounion-CascadedPolygonUnion "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::geounion::CascadedPolygonUnion")
  set_tests_properties(unit-operation-geounion-CascadedPolygonUnion PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-geounion-CascadedPolygonUnion "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::geounion::CascadedPolygonUnion")
  set_tests_properties(unit-operation-geounion-CascadedPolygonUnion PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-geounion-CascadedPolygonUnion NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-geounion-CoverageUnion "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::operation::geounion::CoverageUnion")
  set_tests_properties(unit-operation-geounion-CoverageUnion PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-geounion-CoverageUnion "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::operation::geounion::CoverageUnion")
  set_tests_properties(unit-operation-geounion-CoverageUnion PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-geounion-CoverageUnion "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::geounion::CoverageUnion")
  set_tests_properties(unit-operation-geounion-CoverageUnion PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-geounion-CoverageUnion "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::geounion::CoverageUnion")
  set_tests_properties(unit-operation-geounion-CoverageUnion PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-geounion-CoverageUnion NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-geounion-UnaryUnionOp "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::operation::geounion::UnaryUnionOp")
  set_tests_properties(unit-operation-geounion-UnaryUnionOp PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-geounion-UnaryUnionOp "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::operation::geounion::UnaryUnionOp")
  set_tests_properties(unit-operation-geounion-UnaryUnionOp PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-geounion-UnaryUnionOp "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::geounion::UnaryUnionOp")
  set_tests_properties(unit-operation-geounion-UnaryUnionOp PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-geounion-UnaryUnionOp "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::geounion::UnaryUnionOp")
  set_tests_properties(unit-operation-geounion-UnaryUnionOp PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-geounion-UnaryUnionOp NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-intersection-RectangleIntersection "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::operation::intersection::RectangleIntersection")
  set_tests_properties(unit-operation-intersection-RectangleIntersection PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-intersection-RectangleIntersection "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::operation::intersection::RectangleIntersection")
  set_tests_properties(unit-operation-intersection-RectangleIntersection PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-intersection-RectangleIntersection "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::intersection::RectangleIntersection")
  set_tests_properties(unit-operation-intersection-RectangleIntersection PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-intersection-RectangleIntersection "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::intersection::RectangleIntersection")
  set_tests_properties(unit-operation-intersection-RectangleIntersection PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-intersection-RectangleIntersection NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-linemerge-LineMerger "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::operation::linemerge::LineMerger")
  set_tests_properties(unit-operation-linemerge-LineMerger PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-linemerge-LineMerger "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::operation::linemerge::LineMerger")
  set_tests_properties(unit-operation-linemerge-LineMerger PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-linemerge-LineMerger "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::linemerge::LineMerger")
  set_tests_properties(unit-operation-linemerge-LineMerger PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-linemerge-LineMerger "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::linemerge::LineMerger")
  set_tests_properties(unit-operation-linemerge-LineMerger PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-linemerge-LineMerger NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-linemerge-LineSequencer "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::operation::linemerge::LineSequencer")
  set_tests_properties(unit-operation-linemerge-LineSequencer PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-linemerge-LineSequencer "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::operation::linemerge::LineSequencer")
  set_tests_properties(unit-operation-linemerge-LineSequencer PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-linemerge-LineSequencer "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::linemerge::LineSequencer")
  set_tests_properties(unit-operation-linemerge-LineSequencer PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-linemerge-LineSequencer "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::linemerge::LineSequencer")
  set_tests_properties(unit-operation-linemerge-LineSequencer PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-linemerge-LineSequencer NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-overlay-OverlayOpUnion "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::operation::overlay::OverlayOpUnion")
  set_tests_properties(unit-operation-overlay-OverlayOpUnion PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-overlay-OverlayOpUnion "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::operation::overlay::OverlayOpUnion")
  set_tests_properties(unit-operation-overlay-OverlayOpUnion PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-overlay-OverlayOpUnion "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::overlay::OverlayOpUnion")
  set_tests_properties(unit-operation-overlay-OverlayOpUnion PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-overlay-OverlayOpUnion "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::overlay::OverlayOpUnion")
  set_tests_properties(unit-operation-overlay-OverlayOpUnion PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-overlay-OverlayOpUnion NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-overlay-snap-GeometrySnapper "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::operation::overlay::snap::GeometrySnapper")
  set_tests_properties(unit-operation-overlay-snap-GeometrySnapper PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-overlay-snap-GeometrySnapper "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::operation::overlay::snap::GeometrySnapper")
  set_tests_properties(unit-operation-overlay-snap-GeometrySnapper PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-overlay-snap-GeometrySnapper "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::overlay::snap::GeometrySnapper")
  set_tests_properties(unit-operation-overlay-snap-GeometrySnapper PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-overlay-snap-GeometrySnapper "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::overlay::snap::GeometrySnapper")
  set_tests_properties(unit-operation-overlay-snap-GeometrySnapper PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-overlay-snap-GeometrySnapper NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-overlay-snap-LineStringSnapper "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::operation::overlay::snap::LineStringSnapper")
  set_tests_properties(unit-operation-overlay-snap-LineStringSnapper PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-overlay-snap-LineStringSnapper "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::operation::overlay::snap::LineStringSnapper")
  set_tests_properties(unit-operation-overlay-snap-LineStringSnapper PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-overlay-snap-LineStringSnapper "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::overlay::snap::LineStringSnapper")
  set_tests_properties(unit-operation-overlay-snap-LineStringSnapper PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-overlay-snap-LineStringSnapper "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::overlay::snap::LineStringSnapper")
  set_tests_properties(unit-operation-overlay-snap-LineStringSnapper PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-overlay-snap-LineStringSnapper NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-overlay-validate-FuzzyPointLocator "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::operation::overlay::validate::FuzzyPointLocator")
  set_tests_properties(unit-operation-overlay-validate-FuzzyPointLocator PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-overlay-validate-FuzzyPointLocator "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::operation::overlay::validate::FuzzyPointLocator")
  set_tests_properties(unit-operation-overlay-validate-FuzzyPointLocator PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-overlay-validate-FuzzyPointLocator "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::overlay::validate::FuzzyPointLocator")
  set_tests_properties(unit-operation-overlay-validate-FuzzyPointLocator PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-overlay-validate-FuzzyPointLocator "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::overlay::validate::FuzzyPointLocator")
  set_tests_properties(unit-operation-overlay-validate-FuzzyPointLocator PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-overlay-validate-FuzzyPointLocator NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-overlay-validate-OffsetPointGenerator "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::operation::overlay::validate::OffsetPointGenerator")
  set_tests_properties(unit-operation-overlay-validate-OffsetPointGenerator PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-overlay-validate-OffsetPointGenerator "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::operation::overlay::validate::OffsetPointGenerator")
  set_tests_properties(unit-operation-overlay-validate-OffsetPointGenerator PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-overlay-validate-OffsetPointGenerator "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::overlay::validate::OffsetPointGenerator")
  set_tests_properties(unit-operation-overlay-validate-OffsetPointGenerator PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-overlay-validate-OffsetPointGenerator "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::overlay::validate::OffsetPointGenerator")
  set_tests_properties(unit-operation-overlay-validate-OffsetPointGenerator PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-overlay-validate-OffsetPointGenerator NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-overlay-validate-OverlayResultValidator "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::operation::overlay::validate::OverlayResultValidator")
  set_tests_properties(unit-operation-overlay-validate-OverlayResultValidator PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-overlay-validate-OverlayResultValidator "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::operation::overlay::validate::OverlayResultValidator")
  set_tests_properties(unit-operation-overlay-validate-OverlayResultValidator PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-overlay-validate-OverlayResultValidator "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::overlay::validate::OverlayResultValidator")
  set_tests_properties(unit-operation-overlay-validate-OverlayResultValidator PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-overlay-validate-OverlayResultValidator "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::overlay::validate::OverlayResultValidator")
  set_tests_properties(unit-operation-overlay-validate-OverlayResultValidator PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-overlay-validate-OverlayResultValidator NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-polygonize-Polygonize "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::operation::polygonize::Polygonize")
  set_tests_properties(unit-operation-polygonize-Polygonize PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-polygonize-Polygonize "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::operation::polygonize::Polygonize")
  set_tests_properties(unit-operation-polygonize-Polygonize PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-polygonize-Polygonize "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::polygonize::Polygonize")
  set_tests_properties(unit-operation-polygonize-Polygonize PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-polygonize-Polygonize "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::polygonize::Polygonize")
  set_tests_properties(unit-operation-polygonize-Polygonize PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-polygonize-Polygonize NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-sharedpaths-SharedPathsOp "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::operation::sharedpaths::SharedPathsOp")
  set_tests_properties(unit-operation-sharedpaths-SharedPathsOp PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-sharedpaths-SharedPathsOp "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::operation::sharedpaths::SharedPathsOp")
  set_tests_properties(unit-operation-sharedpaths-SharedPathsOp PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-sharedpaths-SharedPathsOp "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::sharedpaths::SharedPathsOp")
  set_tests_properties(unit-operation-sharedpaths-SharedPathsOp PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-sharedpaths-SharedPathsOp "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::sharedpaths::SharedPathsOp")
  set_tests_properties(unit-operation-sharedpaths-SharedPathsOp PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-sharedpaths-SharedPathsOp NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-valid-IsValidOp "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::operation::valid::IsValidOp")
  set_tests_properties(unit-operation-valid-IsValidOp PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-valid-IsValidOp "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::operation::valid::IsValidOp")
  set_tests_properties(unit-operation-valid-IsValidOp PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-valid-IsValidOp "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::valid::IsValidOp")
  set_tests_properties(unit-operation-valid-IsValidOp PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-valid-IsValidOp "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::valid::IsValidOp")
  set_tests_properties(unit-operation-valid-IsValidOp PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-valid-IsValidOp NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-valid-RepeatedPointRemover "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::operation::valid::RepeatedPointRemover")
  set_tests_properties(unit-operation-valid-RepeatedPointRemover PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-valid-RepeatedPointRemover "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::operation::valid::RepeatedPointRemover")
  set_tests_properties(unit-operation-valid-RepeatedPointRemover PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-valid-RepeatedPointRemover "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::valid::RepeatedPointRemover")
  set_tests_properties(unit-operation-valid-RepeatedPointRemover PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-valid-RepeatedPointRemover "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::valid::RepeatedPointRemover")
  set_tests_properties(unit-operation-valid-RepeatedPointRemover PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-valid-RepeatedPointRemover NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-valid-ValidClosedRing "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::operation::valid::ValidClosedRing")
  set_tests_properties(unit-operation-valid-ValidClosedRing PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-valid-ValidClosedRing "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::operation::valid::ValidClosedRing")
  set_tests_properties(unit-operation-valid-ValidClosedRing PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-valid-ValidClosedRing "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::valid::ValidClosedRing")
  set_tests_properties(unit-operation-valid-ValidClosedRing PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-valid-ValidClosedRing "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::valid::ValidClosedRing")
  set_tests_properties(unit-operation-valid-ValidClosedRing PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-valid-ValidClosedRing NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-operation-valid-ValidSelfTouchingRingFormingHole "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::operation::valid::ValidSelfTouchingRingFormingHole")
  set_tests_properties(unit-operation-valid-ValidSelfTouchingRingFormingHole PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-operation-valid-ValidSelfTouchingRingFormingHole "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::operation::valid::ValidSelfTouchingRingFormingHole")
  set_tests_properties(unit-operation-valid-ValidSelfTouchingRingFormingHole PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-operation-valid-ValidSelfTouchingRingFormingHole "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::operation::valid::ValidSelfTouchingRingFormingHole")
  set_tests_properties(unit-operation-valid-ValidSelfTouchingRingFormingHole PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-operation-valid-ValidSelfTouchingRingFormingHole "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::operation::valid::ValidSelfTouchingRingFormingHole")
  set_tests_properties(unit-operation-valid-ValidSelfTouchingRingFormingHole PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-operation-valid-ValidSelfTouchingRingFormingHole NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-precision-CommonBits "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::precision::CommonBits")
  set_tests_properties(unit-precision-CommonBits PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-precision-CommonBits "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::precision::CommonBits")
  set_tests_properties(unit-precision-CommonBits PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-precision-CommonBits "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::precision::CommonBits")
  set_tests_properties(unit-precision-CommonBits PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-precision-CommonBits "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::precision::CommonBits")
  set_tests_properties(unit-precision-CommonBits PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-precision-CommonBits NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-precision-GeometryPrecisionReducer "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::precision::GeometryPrecisionReducer")
  set_tests_properties(unit-precision-GeometryPrecisionReducer PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-precision-GeometryPrecisionReducer "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::precision::GeometryPrecisionReducer")
  set_tests_properties(unit-precision-GeometryPrecisionReducer PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-precision-GeometryPrecisionReducer "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::precision::GeometryPrecisionReducer")
  set_tests_properties(unit-precision-GeometryPrecisionReducer PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-precision-GeometryPrecisionReducer "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::precision::GeometryPrecisionReducer")
  set_tests_properties(unit-precision-GeometryPrecisionReducer PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-precision-GeometryPrecisionReducer NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-precision-SimpleGeometryPrecisionReducer "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::precision::SimpleGeometryPrecisionReducer")
  set_tests_properties(unit-precision-SimpleGeometryPrecisionReducer PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-precision-SimpleGeometryPrecisionReducer "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::precision::SimpleGeometryPrecisionReducer")
  set_tests_properties(unit-precision-SimpleGeometryPrecisionReducer PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-precision-SimpleGeometryPrecisionReducer "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::precision::SimpleGeometryPrecisionReducer")
  set_tests_properties(unit-precision-SimpleGeometryPrecisionReducer PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-precision-SimpleGeometryPrecisionReducer "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::precision::SimpleGeometryPrecisionReducer")
  set_tests_properties(unit-precision-SimpleGeometryPrecisionReducer PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-precision-SimpleGeometryPrecisionReducer NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-simplify-DouglasPeuckerSimplifier "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::simplify::DouglasPeuckerSimplifier")
  set_tests_properties(unit-simplify-DouglasPeuckerSimplifier PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-simplify-DouglasPeuckerSimplifier "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::simplify::DouglasPeuckerSimplifier")
  set_tests_properties(unit-simplify-DouglasPeuckerSimplifier PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-simplify-DouglasPeuckerSimplifier "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::simplify::DouglasPeuckerSimplifier")
  set_tests_properties(unit-simplify-DouglasPeuckerSimplifier PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-simplify-DouglasPeuckerSimplifier "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::simplify::DouglasPeuckerSimplifier")
  set_tests_properties(unit-simplify-DouglasPeuckerSimplifier PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-simplify-DouglasPeuckerSimplifier NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-simplify-TopologyPreservingSimplifier "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::simplify::TopologyPreservingSimplifier")
  set_tests_properties(unit-simplify-TopologyPreservingSimplifier PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-simplify-TopologyPreservingSimplifier "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::simplify::TopologyPreservingSimplifier")
  set_tests_properties(unit-simplify-TopologyPreservingSimplifier PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-simplify-TopologyPreservingSimplifier "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::simplify::TopologyPreservingSimplifier")
  set_tests_properties(unit-simplify-TopologyPreservingSimplifier PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-simplify-TopologyPreservingSimplifier "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::simplify::TopologyPreservingSimplifier")
  set_tests_properties(unit-simplify-TopologyPreservingSimplifier PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-simplify-TopologyPreservingSimplifier NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-triangulate-Delaunay "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::triangulate::Delaunay")
  set_tests_properties(unit-triangulate-Delaunay PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-triangulate-Delaunay "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::triangulate::Delaunay")
  set_tests_properties(unit-triangulate-Delaunay PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-triangulate-Delaunay "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::triangulate::Delaunay")
  set_tests_properties(unit-triangulate-Delaunay PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-triangulate-Delaunay "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::triangulate::Delaunay")
  set_tests_properties(unit-triangulate-Delaunay PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-triangulate-Delaunay NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-triangulate-Voronoi "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::triangulate::Voronoi")
  set_tests_properties(unit-triangulate-Voronoi PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-triangulate-Voronoi "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::triangulate::Voronoi")
  set_tests_properties(unit-triangulate-Voronoi PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-triangulate-Voronoi "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::triangulate::Voronoi")
  set_tests_properties(unit-triangulate-Voronoi PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-triangulate-Voronoi "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::triangulate::Voronoi")
  set_tests_properties(unit-triangulate-Voronoi PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-triangulate-Voronoi NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-triangulate-quadedge-QuadEdgeSubdivision "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::triangulate::quadedge::QuadEdgeSubdivision")
  set_tests_properties(unit-triangulate-quadedge-QuadEdgeSubdivision PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-triangulate-quadedge-QuadEdgeSubdivision "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::triangulate::quadedge::QuadEdgeSubdivision")
  set_tests_properties(unit-triangulate-quadedge-QuadEdgeSubdivision PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-triangulate-quadedge-QuadEdgeSubdivision "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::triangulate::quadedge::QuadEdgeSubdivision")
  set_tests_properties(unit-triangulate-quadedge-QuadEdgeSubdivision PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-triangulate-quadedge-QuadEdgeSubdivision "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::triangulate::quadedge::QuadEdgeSubdivision")
  set_tests_properties(unit-triangulate-quadedge-QuadEdgeSubdivision PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-triangulate-quadedge-QuadEdgeSubdivision NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-triangulate-quadedge-QuadEdge "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::triangulate::quadedge::QuadEdge")
  set_tests_properties(unit-triangulate-quadedge-QuadEdge PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-triangulate-quadedge-QuadEdge "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::triangulate::quadedge::QuadEdge")
  set_tests_properties(unit-triangulate-quadedge-QuadEdge PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-triangulate-quadedge-QuadEdge "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::triangulate::quadedge::QuadEdge")
  set_tests_properties(unit-triangulate-quadedge-QuadEdge PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-triangulate-quadedge-QuadEdge "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::triangulate::quadedge::QuadEdge")
  set_tests_properties(unit-triangulate-quadedge-QuadEdge PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-triangulate-quadedge-QuadEdge NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-triangulate-quadedge-Vertex "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::triangulate::quadedge::Vertex")
  set_tests_properties(unit-triangulate-quadedge-Vertex PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-triangulate-quadedge-Vertex "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::triangulate::quadedge::Vertex")
  set_tests_properties(unit-triangulate-quadedge-Vertex PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-triangulate-quadedge-Vertex "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::triangulate::quadedge::Vertex")
  set_tests_properties(unit-triangulate-quadedge-Vertex PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-triangulate-quadedge-Vertex "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::triangulate::quadedge::Vertex")
  set_tests_properties(unit-triangulate-quadedge-Vertex PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-triangulate-quadedge-Vertex NOT_AVAILABLE)
endif()
if("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Dd][Ee][Bb][Uu][Gg])$")
  add_test(unit-util-UniqueCoordinateArrayFilter "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Debug/test_geos_unit.exe" "geos::util::UniqueCoordinateArrayFilter")
  set_tests_properties(unit-util-UniqueCoordinateArrayFilter PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ee][Aa][Ss][Ee])$")
  add_test(unit-util-UniqueCoordinateArrayFilter "F:/code/3rdparty/geos-3.8.1/vs2019/bin/Release/test_geos_unit.exe" "geos::util::UniqueCoordinateArrayFilter")
  set_tests_properties(unit-util-UniqueCoordinateArrayFilter PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll])$")
  add_test(unit-util-UniqueCoordinateArrayFilter "F:/code/3rdparty/geos-3.8.1/vs2019/bin/MinSizeRel/test_geos_unit.exe" "geos::util::UniqueCoordinateArrayFilter")
  set_tests_properties(unit-util-UniqueCoordinateArrayFilter PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
elseif("${CTEST_CONFIGURATION_TYPE}" MATCHES "^([Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo])$")
  add_test(unit-util-UniqueCoordinateArrayFilter "F:/code/3rdparty/geos-3.8.1/vs2019/bin/RelWithDebInfo/test_geos_unit.exe" "geos::util::UniqueCoordinateArrayFilter")
  set_tests_properties(unit-util-UniqueCoordinateArrayFilter PROPERTIES  _BACKTRACE_TRIPLES "F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;30;add_test;F:/code/3rdparty/geos-3.8.1/geos-3.8.1/tests/unit/CMakeLists.txt;0;")
else()
  add_test(unit-util-UniqueCoordinateArrayFilter NOT_AVAILABLE)
endif()
